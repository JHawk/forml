-- FormlZ
    -- -------
    -- Demonstration of some classic FP data structures.  This form of polymorphism can
    -- be simulated in Forml the same way they are implemented in Haskell - as a function
    -- dictionary, the only difference being that you must explicitly bind the dictionary
    -- instance to a symbol (as opposed to it being referenced by the type variable's
    -- instantiation).

    module "Forml Z"

        open list

        Functor f =

            { map: (a -> b) -> f a -> f b }

        Monad m =

            { (>>=): m a -> (a -> m b) -> m b
              ret: a -> m a }

        map z x f = z.map f x

        bind { ret: f, _ } x = f x

        list_functor =

            { map _ {nil} = {nil} 
                | f { head: x, tail: xs } =
                      { head: f x
                        tail: list_functor.map f xs }}

        list_monad =

            { (>>=) x g = concat_map g x
              return x = [:x] }

        js_monad =

            { (>>=) x f = x >>= f
              return x = return x }

        let (>>>=) x g = concat_map g x
            z = 1 .. 3 >>>= Î»x = [:x, x + 1, x + 2]

        z == [:1,2,3,2,3,4,3,4,5]
