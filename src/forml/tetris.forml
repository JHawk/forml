-- Tetris
-- ------

-- An implementation of the classic 80s computer game TETRIS, written
-- in the programming language Forml.

module tetris

    open prelude.string
    open prelude
    open prelude.html
    open prelude.array
    
    n_rows    = 19
    n_columns = 9 

    css =
    
        "position: absolute;
         width: 28px;
         height: 28px;
         background-color: green;"    

    
    -- The `Piece` type is a type synonym - it declares a local alias which
    -- can be used to make the type signatures easier to read.

    Piece = Array (Array Bool)

    -- The classic Tetris pieces.
    
    pieces: Array Piece =
    
        let x = true
            o = false

        [ [ [ x ]
            [ x ]
            [ x ]
            [ x ] ]
    
          [ [ x, o ]
            [ x, o ]
            [ x, x ] ]
            
          [ [ o, x ]
            [ o, x ]
            [ x, x ] ]
    
          [ [ x, x ]
            [ x, x ] ]
            
          [ [ o, x, o ]
            [ x, x, x ] ]
            
          [ [ x, x, o ]
            [ o, x, x ] ]
            
          [ [ o, x, x ]
            [ x, x, o ] ] ]
            

                
    rotate: Piece -> JS Piece | x =

        var new_row acc piece index col =

                if index < length piece
                
                    do acc <- put (get col (get index piece)) acc
                       new_row acc piece (index + 1) col

                else return acc
        
        sequence <| map (new_row [] x 0) (0 .. length (get 0 x) - 1)

    get 3 pieces is do! rotate (get 3 pieces)
    
    get 1 pieces is
    
        do! x <- rotate (get 1 pieces)
            x <- rotate x
            x <- rotate x
            rotate x
            


    Board =

        { piece: Piece
          board: Array (Array Bool)
          x: Num
          y: Num }
        


    board: Board =

        var new_row = yield 0 .. n_columns 'map 位_ = true

        { piece = get 0 pieces
          board = do! sequence (0 .. n_rows 'map 位_ = new_row)
          x = 0
          y = 3 }
        
    length board.board == 20
    length (get 0 board.board) == 10
    
    zip_with: (a -> b -> c) -> Array a -> Array b -> Array c
    zip_with f xs ys = do! `var z = [];
                            for (var x in xs) {
                               z.push(f(xs[x])(ys[x]));
                            };
                            return z;`
                            
            
    draw: Board -> Piece -> JS {}
    draw  board    piece  =

        var draw_block: Num -> Num -> {}
            draw_block x y when get x (get y board.board) =
                do! "body" $+ "<div style='top:`y*30`px;left:`x*30`px;`css`'/>"
                
            draw_block _ _ = {}

            draw_row: Array Num -> Num -> (Array {})
            draw_row row x = map (位f = f x) <| map draw_block row
            
            rows = 0 .. n_rows 'map 位_ = 0 .. n_columns

        do  "body" $| "display" <| "inline"
            "body" $= ""
            return (zip_with draw_row rows (0 .. n_rows))
            return {}

    do! draw board (get 0 pieces) 
        return false    
        
        
         
